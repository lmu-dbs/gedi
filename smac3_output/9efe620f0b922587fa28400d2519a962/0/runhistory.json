{
  "stats": {
    "submitted": 20,
    "finished": 20,
    "running": 0
  },
  "data": [
    [
      1,
      null,
      209652396,
      null,
      [
        0.011709546236355006,
        0.006180465197876425
      ],
      1.8946030139923096,
      1,
      1707410723.8614569,
      1707410725.756709,
      {}
    ],
    [
      2,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1707410725.7586188,
      1707410725.761635,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/Users/andreamaldonado/miniconda3/envs/tag/lib/python3.9/site-packages/smac/runner/target_function_runner.py\", line 184, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/Users/andreamaldonado/miniconda3/envs/tag/lib/python3.9/site-packages/smac/runner/target_function_runner.py\", line 257, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/Users/andreamaldonado/git_tree/tag/tag/generator.py\", line 161, in gen_log\n    tree = generate_process_tree(parameters={\n  File \"/Users/andreamaldonado/miniconda3/envs/tag/lib/python3.9/site-packages/pm4py/sim.py\", line 93, in generate_process_tree\n    return algorithm.apply(**kwargs)\n  File \"/Users/andreamaldonado/miniconda3/envs/tag/lib/python3.9/site-packages/pm4py/algo/simulation/tree_generator/algorithm.py\", line 55, in apply\n    return exec_utils.get_variant(variant).apply(parameters=parameters)\n  File \"/Users/andreamaldonado/miniconda3/envs/tag/lib/python3.9/site-packages/pm4py/algo/simulation/tree_generator/variants/ptandloggenerator.py\", line 119, in apply\n    return GeneratedTree(parameters).generate()\n  File \"/Users/andreamaldonado/miniconda3/envs/tag/lib/python3.9/site-packages/pm4py/algo/simulation/tree_generator/variants/ptandloggenerator.py\", line 293, in __init__\n    self.total_activities = int(round(self.draw_random_number_from_distribution()))\n  File \"/Users/andreamaldonado/miniconda3/envs/tag/lib/python3.9/site-packages/pm4py/algo/simulation/tree_generator/variants/ptandloggenerator.py\", line 164, in draw_random_number_from_distribution\n    return self.activity_distribution.rvs(1)[0]\n  File \"/Users/andreamaldonado/miniconda3/envs/tag/lib/python3.9/site-packages/scipy/stats/_distn_infrastructure.py\", line 468, in rvs\n    return self.dist.rvs(*self.args, **kwds)\n  File \"/Users/andreamaldonado/miniconda3/envs/tag/lib/python3.9/site-packages/scipy/stats/_distn_infrastructure.py\", line 1036, in rvs\n    raise ValueError(message)\nValueError: Domain error in arguments. The `scale` parameter must be positive for all distributions, and many distributions have restrictions on shape parameters. Please see the `scipy.stats.triang` documentation for details.\n",
        "error": "ValueError('Domain error in arguments. The `scale` parameter must be positive for all distributions, and many distributions have restrictions on shape parameters. Please see the `scipy.stats.triang` documentation for details.')"
      }
    ],
    [
      3,
      null,
      209652396,
      null,
      [
        0.06850390869023859,
        0.007079870206870474
      ],
      1.5154807567596436,
      1,
      1707410725.763343,
      1707410727.279398,
      {}
    ],
    [
      4,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1707410727.281443,
      1707410727.282572,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/Users/andreamaldonado/miniconda3/envs/tag/lib/python3.9/site-packages/smac/runner/target_function_runner.py\", line 184, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/Users/andreamaldonado/miniconda3/envs/tag/lib/python3.9/site-packages/smac/runner/target_function_runner.py\", line 257, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/Users/andreamaldonado/git_tree/tag/tag/generator.py\", line 161, in gen_log\n    tree = generate_process_tree(parameters={\n  File \"/Users/andreamaldonado/miniconda3/envs/tag/lib/python3.9/site-packages/pm4py/sim.py\", line 93, in generate_process_tree\n    return algorithm.apply(**kwargs)\n  File \"/Users/andreamaldonado/miniconda3/envs/tag/lib/python3.9/site-packages/pm4py/algo/simulation/tree_generator/algorithm.py\", line 55, in apply\n    return exec_utils.get_variant(variant).apply(parameters=parameters)\n  File \"/Users/andreamaldonado/miniconda3/envs/tag/lib/python3.9/site-packages/pm4py/algo/simulation/tree_generator/variants/ptandloggenerator.py\", line 119, in apply\n    return GeneratedTree(parameters).generate()\n  File \"/Users/andreamaldonado/miniconda3/envs/tag/lib/python3.9/site-packages/pm4py/algo/simulation/tree_generator/variants/ptandloggenerator.py\", line 293, in __init__\n    self.total_activities = int(round(self.draw_random_number_from_distribution()))\n  File \"/Users/andreamaldonado/miniconda3/envs/tag/lib/python3.9/site-packages/pm4py/algo/simulation/tree_generator/variants/ptandloggenerator.py\", line 164, in draw_random_number_from_distribution\n    return self.activity_distribution.rvs(1)[0]\n  File \"/Users/andreamaldonado/miniconda3/envs/tag/lib/python3.9/site-packages/scipy/stats/_distn_infrastructure.py\", line 468, in rvs\n    return self.dist.rvs(*self.args, **kwds)\n  File \"/Users/andreamaldonado/miniconda3/envs/tag/lib/python3.9/site-packages/scipy/stats/_distn_infrastructure.py\", line 1036, in rvs\n    raise ValueError(message)\nValueError: Domain error in arguments. The `scale` parameter must be positive for all distributions, and many distributions have restrictions on shape parameters. Please see the `scipy.stats.triang` documentation for details.\n",
        "error": "ValueError('Domain error in arguments. The `scale` parameter must be positive for all distributions, and many distributions have restrictions on shape parameters. Please see the `scipy.stats.triang` documentation for details.')"
      }
    ],
    [
      5,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1707410727.284427,
      1707410727.285355,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/Users/andreamaldonado/miniconda3/envs/tag/lib/python3.9/site-packages/smac/runner/target_function_runner.py\", line 184, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/Users/andreamaldonado/miniconda3/envs/tag/lib/python3.9/site-packages/smac/runner/target_function_runner.py\", line 257, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/Users/andreamaldonado/git_tree/tag/tag/generator.py\", line 161, in gen_log\n    tree = generate_process_tree(parameters={\n  File \"/Users/andreamaldonado/miniconda3/envs/tag/lib/python3.9/site-packages/pm4py/sim.py\", line 93, in generate_process_tree\n    return algorithm.apply(**kwargs)\n  File \"/Users/andreamaldonado/miniconda3/envs/tag/lib/python3.9/site-packages/pm4py/algo/simulation/tree_generator/algorithm.py\", line 55, in apply\n    return exec_utils.get_variant(variant).apply(parameters=parameters)\n  File \"/Users/andreamaldonado/miniconda3/envs/tag/lib/python3.9/site-packages/pm4py/algo/simulation/tree_generator/variants/ptandloggenerator.py\", line 119, in apply\n    return GeneratedTree(parameters).generate()\n  File \"/Users/andreamaldonado/miniconda3/envs/tag/lib/python3.9/site-packages/pm4py/algo/simulation/tree_generator/variants/ptandloggenerator.py\", line 293, in __init__\n    self.total_activities = int(round(self.draw_random_number_from_distribution()))\n  File \"/Users/andreamaldonado/miniconda3/envs/tag/lib/python3.9/site-packages/pm4py/algo/simulation/tree_generator/variants/ptandloggenerator.py\", line 164, in draw_random_number_from_distribution\n    return self.activity_distribution.rvs(1)[0]\n  File \"/Users/andreamaldonado/miniconda3/envs/tag/lib/python3.9/site-packages/scipy/stats/_distn_infrastructure.py\", line 468, in rvs\n    return self.dist.rvs(*self.args, **kwds)\n  File \"/Users/andreamaldonado/miniconda3/envs/tag/lib/python3.9/site-packages/scipy/stats/_distn_infrastructure.py\", line 1036, in rvs\n    raise ValueError(message)\nValueError: Domain error in arguments. The `scale` parameter must be positive for all distributions, and many distributions have restrictions on shape parameters. Please see the `scipy.stats.triang` documentation for details.\n",
        "error": "ValueError('Domain error in arguments. The `scale` parameter must be positive for all distributions, and many distributions have restrictions on shape parameters. Please see the `scipy.stats.triang` documentation for details.')"
      }
    ],
    [
      6,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1707410727.485078,
      1707410727.486141,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/Users/andreamaldonado/miniconda3/envs/tag/lib/python3.9/site-packages/smac/runner/target_function_runner.py\", line 184, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/Users/andreamaldonado/miniconda3/envs/tag/lib/python3.9/site-packages/smac/runner/target_function_runner.py\", line 257, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/Users/andreamaldonado/git_tree/tag/tag/generator.py\", line 161, in gen_log\n    tree = generate_process_tree(parameters={\n  File \"/Users/andreamaldonado/miniconda3/envs/tag/lib/python3.9/site-packages/pm4py/sim.py\", line 93, in generate_process_tree\n    return algorithm.apply(**kwargs)\n  File \"/Users/andreamaldonado/miniconda3/envs/tag/lib/python3.9/site-packages/pm4py/algo/simulation/tree_generator/algorithm.py\", line 55, in apply\n    return exec_utils.get_variant(variant).apply(parameters=parameters)\n  File \"/Users/andreamaldonado/miniconda3/envs/tag/lib/python3.9/site-packages/pm4py/algo/simulation/tree_generator/variants/ptandloggenerator.py\", line 119, in apply\n    return GeneratedTree(parameters).generate()\n  File \"/Users/andreamaldonado/miniconda3/envs/tag/lib/python3.9/site-packages/pm4py/algo/simulation/tree_generator/variants/ptandloggenerator.py\", line 293, in __init__\n    self.total_activities = int(round(self.draw_random_number_from_distribution()))\n  File \"/Users/andreamaldonado/miniconda3/envs/tag/lib/python3.9/site-packages/pm4py/algo/simulation/tree_generator/variants/ptandloggenerator.py\", line 164, in draw_random_number_from_distribution\n    return self.activity_distribution.rvs(1)[0]\n  File \"/Users/andreamaldonado/miniconda3/envs/tag/lib/python3.9/site-packages/scipy/stats/_distn_infrastructure.py\", line 468, in rvs\n    return self.dist.rvs(*self.args, **kwds)\n  File \"/Users/andreamaldonado/miniconda3/envs/tag/lib/python3.9/site-packages/scipy/stats/_distn_infrastructure.py\", line 1036, in rvs\n    raise ValueError(message)\nValueError: Domain error in arguments. The `scale` parameter must be positive for all distributions, and many distributions have restrictions on shape parameters. Please see the `scipy.stats.triang` documentation for details.\n",
        "error": "ValueError('Domain error in arguments. The `scale` parameter must be positive for all distributions, and many distributions have restrictions on shape parameters. Please see the `scipy.stats.triang` documentation for details.')"
      }
    ],
    [
      7,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1707410727.488202,
      1707410727.4891021,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/Users/andreamaldonado/miniconda3/envs/tag/lib/python3.9/site-packages/smac/runner/target_function_runner.py\", line 184, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/Users/andreamaldonado/miniconda3/envs/tag/lib/python3.9/site-packages/smac/runner/target_function_runner.py\", line 257, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/Users/andreamaldonado/git_tree/tag/tag/generator.py\", line 161, in gen_log\n    tree = generate_process_tree(parameters={\n  File \"/Users/andreamaldonado/miniconda3/envs/tag/lib/python3.9/site-packages/pm4py/sim.py\", line 93, in generate_process_tree\n    return algorithm.apply(**kwargs)\n  File \"/Users/andreamaldonado/miniconda3/envs/tag/lib/python3.9/site-packages/pm4py/algo/simulation/tree_generator/algorithm.py\", line 55, in apply\n    return exec_utils.get_variant(variant).apply(parameters=parameters)\n  File \"/Users/andreamaldonado/miniconda3/envs/tag/lib/python3.9/site-packages/pm4py/algo/simulation/tree_generator/variants/ptandloggenerator.py\", line 119, in apply\n    return GeneratedTree(parameters).generate()\n  File \"/Users/andreamaldonado/miniconda3/envs/tag/lib/python3.9/site-packages/pm4py/algo/simulation/tree_generator/variants/ptandloggenerator.py\", line 293, in __init__\n    self.total_activities = int(round(self.draw_random_number_from_distribution()))\n  File \"/Users/andreamaldonado/miniconda3/envs/tag/lib/python3.9/site-packages/pm4py/algo/simulation/tree_generator/variants/ptandloggenerator.py\", line 164, in draw_random_number_from_distribution\n    return self.activity_distribution.rvs(1)[0]\n  File \"/Users/andreamaldonado/miniconda3/envs/tag/lib/python3.9/site-packages/scipy/stats/_distn_infrastructure.py\", line 468, in rvs\n    return self.dist.rvs(*self.args, **kwds)\n  File \"/Users/andreamaldonado/miniconda3/envs/tag/lib/python3.9/site-packages/scipy/stats/_distn_infrastructure.py\", line 1036, in rvs\n    raise ValueError(message)\nValueError: Domain error in arguments. The `scale` parameter must be positive for all distributions, and many distributions have restrictions on shape parameters. Please see the `scipy.stats.triang` documentation for details.\n",
        "error": "ValueError('Domain error in arguments. The `scale` parameter must be positive for all distributions, and many distributions have restrictions on shape parameters. Please see the `scipy.stats.triang` documentation for details.')"
      }
    ],
    [
      8,
      null,
      209652396,
      null,
      [
        0.11276905814557803,
        0.2510656089751941
      ],
      1.4837849140167236,
      1,
      1707410727.49117,
      1707410728.975488,
      {}
    ],
    [
      9,
      null,
      209652396,
      null,
      [
        0.10948736503181977,
        0.12832591175063562
      ],
      0.018411874771118164,
      1,
      1707410728.977809,
      1707410728.996822,
      {}
    ],
    [
      10,
      null,
      209652396,
      null,
      [
        0.0023168737880427948,
        0.033447714841262514
      ],
      0.2510111331939697,
      1,
      1707410728.998794,
      1707410729.250391,
      {}
    ],
    [
      11,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1707410729.253199,
      1707410729.254323,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/Users/andreamaldonado/miniconda3/envs/tag/lib/python3.9/site-packages/smac/runner/target_function_runner.py\", line 184, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/Users/andreamaldonado/miniconda3/envs/tag/lib/python3.9/site-packages/smac/runner/target_function_runner.py\", line 257, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/Users/andreamaldonado/git_tree/tag/tag/generator.py\", line 161, in gen_log\n    tree = generate_process_tree(parameters={\n  File \"/Users/andreamaldonado/miniconda3/envs/tag/lib/python3.9/site-packages/pm4py/sim.py\", line 93, in generate_process_tree\n    return algorithm.apply(**kwargs)\n  File \"/Users/andreamaldonado/miniconda3/envs/tag/lib/python3.9/site-packages/pm4py/algo/simulation/tree_generator/algorithm.py\", line 55, in apply\n    return exec_utils.get_variant(variant).apply(parameters=parameters)\n  File \"/Users/andreamaldonado/miniconda3/envs/tag/lib/python3.9/site-packages/pm4py/algo/simulation/tree_generator/variants/ptandloggenerator.py\", line 119, in apply\n    return GeneratedTree(parameters).generate()\n  File \"/Users/andreamaldonado/miniconda3/envs/tag/lib/python3.9/site-packages/pm4py/algo/simulation/tree_generator/variants/ptandloggenerator.py\", line 293, in __init__\n    self.total_activities = int(round(self.draw_random_number_from_distribution()))\n  File \"/Users/andreamaldonado/miniconda3/envs/tag/lib/python3.9/site-packages/pm4py/algo/simulation/tree_generator/variants/ptandloggenerator.py\", line 164, in draw_random_number_from_distribution\n    return self.activity_distribution.rvs(1)[0]\n  File \"/Users/andreamaldonado/miniconda3/envs/tag/lib/python3.9/site-packages/scipy/stats/_distn_infrastructure.py\", line 468, in rvs\n    return self.dist.rvs(*self.args, **kwds)\n  File \"/Users/andreamaldonado/miniconda3/envs/tag/lib/python3.9/site-packages/scipy/stats/_distn_infrastructure.py\", line 1036, in rvs\n    raise ValueError(message)\nValueError: Domain error in arguments. The `scale` parameter must be positive for all distributions, and many distributions have restrictions on shape parameters. Please see the `scipy.stats.triang` documentation for details.\n",
        "error": "ValueError('Domain error in arguments. The `scale` parameter must be positive for all distributions, and many distributions have restrictions on shape parameters. Please see the `scipy.stats.triang` documentation for details.')"
      }
    ],
    [
      12,
      null,
      209652396,
      null,
      [
        0.07679148074420483,
        0.07346532942350266
      ],
      0.11261701583862305,
      1,
      1707410729.2571251,
      1707410729.370267,
      {}
    ],
    [
      13,
      null,
      209652396,
      null,
      [
        0.03881535428530747,
        0.008071380400834657
      ],
      0.6915278434753418,
      1,
      1707410729.3732102,
      1707410730.065353,
      {}
    ],
    [
      14,
      null,
      209652396,
      null,
      [
        0.11612068934671277,
        0.5213964670929963
      ],
      2.131845712661743,
      1,
      1707410730.387688,
      1707410732.520146,
      {}
    ],
    [
      15,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1707410732.5230982,
      1707410732.524151,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/Users/andreamaldonado/miniconda3/envs/tag/lib/python3.9/site-packages/smac/runner/target_function_runner.py\", line 184, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/Users/andreamaldonado/miniconda3/envs/tag/lib/python3.9/site-packages/smac/runner/target_function_runner.py\", line 257, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/Users/andreamaldonado/git_tree/tag/tag/generator.py\", line 161, in gen_log\n    tree = generate_process_tree(parameters={\n  File \"/Users/andreamaldonado/miniconda3/envs/tag/lib/python3.9/site-packages/pm4py/sim.py\", line 93, in generate_process_tree\n    return algorithm.apply(**kwargs)\n  File \"/Users/andreamaldonado/miniconda3/envs/tag/lib/python3.9/site-packages/pm4py/algo/simulation/tree_generator/algorithm.py\", line 55, in apply\n    return exec_utils.get_variant(variant).apply(parameters=parameters)\n  File \"/Users/andreamaldonado/miniconda3/envs/tag/lib/python3.9/site-packages/pm4py/algo/simulation/tree_generator/variants/ptandloggenerator.py\", line 119, in apply\n    return GeneratedTree(parameters).generate()\n  File \"/Users/andreamaldonado/miniconda3/envs/tag/lib/python3.9/site-packages/pm4py/algo/simulation/tree_generator/variants/ptandloggenerator.py\", line 293, in __init__\n    self.total_activities = int(round(self.draw_random_number_from_distribution()))\n  File \"/Users/andreamaldonado/miniconda3/envs/tag/lib/python3.9/site-packages/pm4py/algo/simulation/tree_generator/variants/ptandloggenerator.py\", line 164, in draw_random_number_from_distribution\n    return self.activity_distribution.rvs(1)[0]\n  File \"/Users/andreamaldonado/miniconda3/envs/tag/lib/python3.9/site-packages/scipy/stats/_distn_infrastructure.py\", line 468, in rvs\n    return self.dist.rvs(*self.args, **kwds)\n  File \"/Users/andreamaldonado/miniconda3/envs/tag/lib/python3.9/site-packages/scipy/stats/_distn_infrastructure.py\", line 1036, in rvs\n    raise ValueError(message)\nValueError: Domain error in arguments. The `scale` parameter must be positive for all distributions, and many distributions have restrictions on shape parameters. Please see the `scipy.stats.triang` documentation for details.\n",
        "error": "ValueError('Domain error in arguments. The `scale` parameter must be positive for all distributions, and many distributions have restrictions on shape parameters. Please see the `scipy.stats.triang` documentation for details.')"
      }
    ],
    [
      16,
      null,
      209652396,
      null,
      [
        0.027697888125734038,
        0.02699464114036814
      ],
      1.2930617332458496,
      1,
      1707410732.5271838,
      1707410733.8208032,
      {}
    ],
    [
      17,
      null,
      209652396,
      null,
      [
        0.15660700112198178,
        0.46859459597392483
      ],
      0.1401538848876953,
      1,
      1707410733.823951,
      1707410733.9646962,
      {}
    ],
    [
      18,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1707410733.9676359,
      1707410733.968648,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/Users/andreamaldonado/miniconda3/envs/tag/lib/python3.9/site-packages/smac/runner/target_function_runner.py\", line 184, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/Users/andreamaldonado/miniconda3/envs/tag/lib/python3.9/site-packages/smac/runner/target_function_runner.py\", line 257, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/Users/andreamaldonado/git_tree/tag/tag/generator.py\", line 161, in gen_log\n    tree = generate_process_tree(parameters={\n  File \"/Users/andreamaldonado/miniconda3/envs/tag/lib/python3.9/site-packages/pm4py/sim.py\", line 93, in generate_process_tree\n    return algorithm.apply(**kwargs)\n  File \"/Users/andreamaldonado/miniconda3/envs/tag/lib/python3.9/site-packages/pm4py/algo/simulation/tree_generator/algorithm.py\", line 55, in apply\n    return exec_utils.get_variant(variant).apply(parameters=parameters)\n  File \"/Users/andreamaldonado/miniconda3/envs/tag/lib/python3.9/site-packages/pm4py/algo/simulation/tree_generator/variants/ptandloggenerator.py\", line 119, in apply\n    return GeneratedTree(parameters).generate()\n  File \"/Users/andreamaldonado/miniconda3/envs/tag/lib/python3.9/site-packages/pm4py/algo/simulation/tree_generator/variants/ptandloggenerator.py\", line 293, in __init__\n    self.total_activities = int(round(self.draw_random_number_from_distribution()))\n  File \"/Users/andreamaldonado/miniconda3/envs/tag/lib/python3.9/site-packages/pm4py/algo/simulation/tree_generator/variants/ptandloggenerator.py\", line 164, in draw_random_number_from_distribution\n    return self.activity_distribution.rvs(1)[0]\n  File \"/Users/andreamaldonado/miniconda3/envs/tag/lib/python3.9/site-packages/scipy/stats/_distn_infrastructure.py\", line 468, in rvs\n    return self.dist.rvs(*self.args, **kwds)\n  File \"/Users/andreamaldonado/miniconda3/envs/tag/lib/python3.9/site-packages/scipy/stats/_distn_infrastructure.py\", line 1036, in rvs\n    raise ValueError(message)\nValueError: Domain error in arguments. The `scale` parameter must be positive for all distributions, and many distributions have restrictions on shape parameters. Please see the `scipy.stats.triang` documentation for details.\n",
        "error": "ValueError('Domain error in arguments. The `scale` parameter must be positive for all distributions, and many distributions have restrictions on shape parameters. Please see the `scipy.stats.triang` documentation for details.')"
      }
    ],
    [
      19,
      null,
      209652396,
      null,
      [
        Infinity,
        Infinity
      ],
      0.0,
      2,
      1707410733.971756,
      1707410733.972685,
      {
        "traceback": "Traceback (most recent call last):\n  File \"/Users/andreamaldonado/miniconda3/envs/tag/lib/python3.9/site-packages/smac/runner/target_function_runner.py\", line 184, in run\n    rval = self(config_copy, target_function, kwargs)\n  File \"/Users/andreamaldonado/miniconda3/envs/tag/lib/python3.9/site-packages/smac/runner/target_function_runner.py\", line 257, in __call__\n    return algorithm(config, **algorithm_kwargs)\n  File \"/Users/andreamaldonado/git_tree/tag/tag/generator.py\", line 161, in gen_log\n    tree = generate_process_tree(parameters={\n  File \"/Users/andreamaldonado/miniconda3/envs/tag/lib/python3.9/site-packages/pm4py/sim.py\", line 93, in generate_process_tree\n    return algorithm.apply(**kwargs)\n  File \"/Users/andreamaldonado/miniconda3/envs/tag/lib/python3.9/site-packages/pm4py/algo/simulation/tree_generator/algorithm.py\", line 55, in apply\n    return exec_utils.get_variant(variant).apply(parameters=parameters)\n  File \"/Users/andreamaldonado/miniconda3/envs/tag/lib/python3.9/site-packages/pm4py/algo/simulation/tree_generator/variants/ptandloggenerator.py\", line 119, in apply\n    return GeneratedTree(parameters).generate()\n  File \"/Users/andreamaldonado/miniconda3/envs/tag/lib/python3.9/site-packages/pm4py/algo/simulation/tree_generator/variants/ptandloggenerator.py\", line 293, in __init__\n    self.total_activities = int(round(self.draw_random_number_from_distribution()))\n  File \"/Users/andreamaldonado/miniconda3/envs/tag/lib/python3.9/site-packages/pm4py/algo/simulation/tree_generator/variants/ptandloggenerator.py\", line 164, in draw_random_number_from_distribution\n    return self.activity_distribution.rvs(1)[0]\n  File \"/Users/andreamaldonado/miniconda3/envs/tag/lib/python3.9/site-packages/scipy/stats/_distn_infrastructure.py\", line 468, in rvs\n    return self.dist.rvs(*self.args, **kwds)\n  File \"/Users/andreamaldonado/miniconda3/envs/tag/lib/python3.9/site-packages/scipy/stats/_distn_infrastructure.py\", line 1036, in rvs\n    raise ValueError(message)\nValueError: Domain error in arguments. The `scale` parameter must be positive for all distributions, and many distributions have restrictions on shape parameters. Please see the `scipy.stats.triang` documentation for details.\n",
        "error": "ValueError('Domain error in arguments. The `scale` parameter must be positive for all distributions, and many distributions have restrictions on shape parameters. Please see the `scipy.stats.triang` documentation for details.')"
      }
    ],
    [
      20,
      null,
      209652396,
      null,
      [
        0.06505174476978992,
        0.13453902141202115
      ],
      0.13518619537353516,
      1,
      1707410733.975761,
      1707410734.11147,
      {}
    ]
  ],
  "configs": {
    "1": {
      "choice": 0.27420973585918546,
      "duplicate": 0,
      "loop": 0.6243590484932066,
      "lt_dependency": 0.11643280289135872,
      "mode": 13,
      "num_traces": 876,
      "or": 0,
      "parallel": 0.5005605065450072,
      "sequence": 0.9603757594153285,
      "silent": 0.9968127990048379
    },
    "2": {
      "choice": 0.7756838992610574,
      "duplicate": 0,
      "loop": 0.04211317901499569,
      "lt_dependency": 0.5104543915577233,
      "mode": 34,
      "num_traces": 324,
      "or": 0,
      "parallel": 0.5131619844958186,
      "sequence": 0.2709401994291693,
      "silent": 0.17004768340848386
    },
    "3": {
      "choice": 0.6535194861143827,
      "duplicate": 0,
      "loop": 0.9576082275714726,
      "lt_dependency": 0.32692241824232043,
      "mode": 24,
      "num_traces": 396,
      "or": 0,
      "parallel": 0.7672931762319058,
      "sequence": 0.6588770150579513,
      "silent": 0.4562873648200184
    },
    "4": {
      "choice": 0.16388946956023576,
      "duplicate": 0,
      "loop": 0.39516660073772075,
      "lt_dependency": 0.7955099861510098,
      "mode": 45,
      "num_traces": 745,
      "or": 0,
      "parallel": 0.25395125332288443,
      "sequence": 0.07748097266070544,
      "silent": 0.6486980180162937
    },
    "5": {
      "choice": 0.04490061519667506,
      "duplicate": 0,
      "loop": 0.8006045478861779,
      "lt_dependency": 0.6931793973967433,
      "mode": 39,
      "num_traces": 607,
      "or": 0,
      "parallel": 0.2829401990491897,
      "sequence": 0.520932387933135,
      "silent": 0.3123690354358405
    },
    "6": {
      "choice": 0.892855270774259,
      "duplicate": 0,
      "loop": 0.09625800670452529,
      "lt_dependency": 0.7827238845235909,
      "mode": 40,
      "num_traces": 715,
      "or": 0,
      "parallel": 0.1376370346783048,
      "sequence": 0.1696964227061463,
      "silent": 0.14680112183512767
    },
    "7": {
      "choice": 0.7180374727086953,
      "duplicate": 0,
      "loop": 0.38960710363751994,
      "lt_dependency": 0.8342936470924586,
      "mode": 33,
      "num_traces": 612,
      "or": 0,
      "parallel": 0.442661634261348,
      "sequence": 0.3700736632331964,
      "silent": 0.2607586865143843
    },
    "8": {
      "choice": 0.6494351719359895,
      "duplicate": 0,
      "loop": 0.9263406719097345,
      "lt_dependency": 0.8011669785745563,
      "mode": 22,
      "num_traces": 656,
      "or": 0,
      "parallel": 0.6739314909219778,
      "sequence": 0.11102436264054778,
      "silent": 0.11927138975266208
    },
    "9": {
      "choice": 0.6067357423109274,
      "duplicate": 0,
      "loop": 0.7938077877018379,
      "lt_dependency": 0.780375183440352,
      "mode": 9,
      "num_traces": 116,
      "or": 0,
      "parallel": 0.7006548839679922,
      "sequence": 0.5744948027137008,
      "silent": 0.47164766512774325
    },
    "10": {
      "choice": 0.5533253688880515,
      "duplicate": 0,
      "loop": 0.964026132896019,
      "lt_dependency": 0.03001621346592246,
      "mode": 8,
      "num_traces": 511,
      "or": 0,
      "parallel": 0.36591282156804816,
      "sequence": 0.322274067414942,
      "silent": 0.6565772422107444
    },
    "11": {
      "choice": 0.5494343511669278,
      "duplicate": 0,
      "loop": 0.5336059705553754,
      "lt_dependency": 0.8713120267643509,
      "mode": 48,
      "num_traces": 657,
      "or": 0,
      "parallel": 0.06962321691297713,
      "sequence": 0.44421549832769713,
      "silent": 0.2519813360815867
    },
    "12": {
      "choice": 0.4432113391500656,
      "duplicate": 0,
      "loop": 0.08032569761590806,
      "lt_dependency": 0.46686456863040254,
      "mode": 15,
      "num_traces": 951,
      "or": 0,
      "parallel": 0.2182787354631025,
      "sequence": 0.21678798853388634,
      "silent": 0.6597662935706207
    },
    "13": {
      "choice": 0.42941825134551564,
      "duplicate": 0,
      "loop": 0.572364115482993,
      "lt_dependency": 0.9788321588104364,
      "mode": 28,
      "num_traces": 652,
      "or": 0,
      "parallel": 0.670099048291211,
      "sequence": 0.9884900996786339,
      "silent": 0.16737988780906454
    },
    "14": {
      "choice": 0.20461653806325297,
      "duplicate": 0,
      "loop": 0.9769934773084338,
      "lt_dependency": 0.32480334760003626,
      "mode": 30,
      "num_traces": 629,
      "or": 0,
      "parallel": 0.25626561208475845,
      "sequence": 0.7024844825643293,
      "silent": 0.7280017370214441
    },
    "15": {
      "choice": 0.10513742381502343,
      "duplicate": 0,
      "loop": 0.1289945956010372,
      "lt_dependency": 0.272735596030051,
      "mode": 37,
      "num_traces": 343,
      "or": 0,
      "parallel": 0.9532215214018152,
      "sequence": 0.5854601439095001,
      "silent": 0.6103292819866452
    },
    "16": {
      "choice": 0.8227832975494558,
      "duplicate": 0,
      "loop": 0.7418709436043187,
      "lt_dependency": 0.07350602138529651,
      "mode": 18,
      "num_traces": 847,
      "or": 0,
      "parallel": 0.5961215119591207,
      "sequence": 0.8156598415054525,
      "silent": 0.9565227983759916
    },
    "17": {
      "choice": 0.8395654584238159,
      "duplicate": 0,
      "loop": 0.2899788929506455,
      "lt_dependency": 0.5709354396645094,
      "mode": 9,
      "num_traces": 711,
      "or": 0,
      "parallel": 0.23085081631421214,
      "sequence": 0.8822921651400499,
      "silent": 0.4296164980725979
    },
    "18": {
      "choice": 0.10613026303513065,
      "duplicate": 0,
      "loop": 0.04879591433177747,
      "lt_dependency": 0.6955473981763196,
      "mode": 35,
      "num_traces": 104,
      "or": 0,
      "parallel": 0.5765293867329646,
      "sequence": 0.4025406834385148,
      "silent": 0.647550297237341
    },
    "19": {
      "choice": 0.37503791895435445,
      "duplicate": 0,
      "loop": 0.6087970645475955,
      "lt_dependency": 0.4201203645695233,
      "mode": 47,
      "num_traces": 118,
      "or": 0,
      "parallel": 0.5803957610736585,
      "sequence": 0.30446258134658233,
      "silent": 0.5063111381074352
    },
    "20": {
      "choice": 0.6635718021177582,
      "duplicate": 0,
      "loop": 0.29717683113833965,
      "lt_dependency": 0.6218352747088531,
      "mode": 23,
      "num_traces": 222,
      "or": 0,
      "parallel": 0.3052995026964705,
      "sequence": 0.5742652615942522,
      "silent": 0.5949640336356915
    }
  },
  "config_origins": {
    "1": "Initial Design: Sobol",
    "2": "Initial Design: Sobol",
    "3": "Initial Design: Sobol",
    "4": "Initial Design: Sobol",
    "5": "Initial Design: Sobol",
    "6": "Acquisition Function Maximizer: Random Search (sorted)",
    "7": "Acquisition Function Maximizer: Random Search (sorted)",
    "8": "Acquisition Function Maximizer: Random Search (sorted)",
    "9": "Acquisition Function Maximizer: Random Search (sorted)",
    "10": "Acquisition Function Maximizer: Random Search (sorted)",
    "11": "Acquisition Function Maximizer: Random Search (sorted)",
    "12": "Acquisition Function Maximizer: Random Search (sorted)",
    "13": "Acquisition Function Maximizer: Random Search (sorted)",
    "14": "Acquisition Function Maximizer: Random Search (sorted)",
    "15": "Acquisition Function Maximizer: Random Search (sorted)",
    "16": "Acquisition Function Maximizer: Random Search (sorted)",
    "17": "Acquisition Function Maximizer: Random Search (sorted)",
    "18": "Acquisition Function Maximizer: Random Search (sorted)",
    "19": "Acquisition Function Maximizer: Random Search (sorted)",
    "20": "Random Search"
  }
}